#include<stdio.h>


double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
  double median1 = 0;
  double median2 = 0;
  double median = 0;

  int step = (nums1Size <= nums2Size)? (nums1Size+1)/2 : (nums2Size+1)/2;

  for(int i = 0;i < nums1Size; i++)
    {
      printf("nums1[%d]:%d\n",i,nums1[i]);
    }

  for(int j = 0;j < nums2Size; j++)
    {
      printf("nums2[%d]:%d\n",j,nums2[j]);
    }

  if(nums1Size == 0) 
    {
      if(nums2Size%2 == 0)
        return  (nums2[nums2Size/2-1] + nums2[nums2Size/2])/2.0;
      else
        return nums2[nums2Size/2];
    }

  if(nums2Size == 0)
    {
      if(nums1Size%2 == 0)
        return  (nums1[nums1Size/2-1] + nums1[nums1Size/2])/2.0;
      else
        return nums1[nums1Size/2];
    }

  if(nums1Size == 1 && nums2Size == 1)
    {
      return (nums1[0]+nums2[0])/2.0;
    }


  if(nums1Size%2 == 0)
    {
      median1 = (nums1[nums1Size/2-1] + nums1[nums1Size/2])/2.0;
    }
  else
    {
      median1 = nums1[nums1Size/2];
    }

  if(nums2Size%2 == 0)
    {
      median2 = (nums2[nums2Size/2-1] + nums2[nums2Size/2])/2.0;
    }
  else
    {
      median2 = nums2[nums2Size/2];
    }

  printf("median1:%lf\n",median1);
  printf("median2:%lf\n",median2);

  if(median1 ==  median2)
    return median1;
  else if(median1 > median2)
    {
      if(median2 )

      median = findMedianSortedArrays(nums1, nums1Size-step, &nums2[step], nums2Size-step);
      printf("median:%lf\n",median);
      if(median <= median2)
        return median2;
      else if(median >= median1)
        return median1;
      else
        return median;
    }
  else
    {
      median = findMedianSortedArrays(nums2, nums2Size-step, &nums1[step], nums1Size-step);
      printf("median:%lf\n",median);
      if(median <= median1)
        return median1;
      else if(median >= median2)
        return median2;
      else
        return median;
    }
}


int  main()
{
  int a1[1] = {2};
  int a2[3] = {1,3,4};
  double t =  findMedianSortedArrays(a1,1,a2,3);
  printf("%lf\n",t);
  return 0;

}
